from datetime import date
from datetime import datetime
from aiogram import types
from aiogram.types import InlineKeyboardButton
from aiogram.types import InlineKeyboardMarkup
from db import DBWorker

DBW=DBWorker()
class KeyBoard:

    current_keyboard = InlineKeyboardMarkup()
    list_of={}

    async def clear_keyboard(self):
        self.current_keyboard = InlineKeyboardMarkup()
        self.list_of={}

    async def new_list_of(self,nl):
        self.list_of=nl
        for i in self.list_of:
            btn=InlineKeyboardButton(text=i, callback_data=self.list_of[i])
            self.current_keyboard.insert(btn)

    async def new_width_of(self,w):
        self.current_keyboard = InlineKeyboardMarkup(row_width = w)
        for i in self.list_of:
            btn=InlineKeyboardButton(text=i, callback_data=self.list_of[i])
            self.current_keyboard.insert(btn)

    async def checker(self,clbck):
        chckr=False
        for i in self.list_of:
            if clbck == self.list_of[i]:
                chckr = True
        return chckr
#–ó–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–∞—è —á–∞—Å—Ç—å —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞
#–í –ø–∞—Ä–∞–º–µ—Ç—Ä–µ num —Ñ—É–Ω–∫—Ü–∏–∏ number –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª
#–¥–ª—è —Ç—Ä—ë—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–ø–∏—Å–∏ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏(–±—É–¥–Ω–∏–µ,—Å—É–±–±–æ—Ç–∞,–≤–æ—Å–∫—Ä–µ—Å–µ–Ω–∏–µ) –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –Ω–∏–∂–µ
#
#   if  datetime.weekday(day_r) <= 4: #–±—É–¥–Ω–∏–µ –¥–Ω–∏
#       if clbck1 == '–¢—Ä–∏ —á–µ–ª–æ–≤–µ–∫–∞ –∏ –±–æ–ª—å—à–µ':
#           list_of_times=[1,2,3] #–ë—É–¥–Ω–∏–µ –¥–Ω–∏, —Ç—Ä–∏ —á–µ–ª–æ–≤–µ–∫–∞
#       elif clbck1 == '–î–≤–∞ —á–µ–ª–æ–≤–µ–∫–∞':
#           list_of_times=[4,5] #–ë—É–¥–Ω–∏–µ –¥–Ω–∏, –¥–≤–∞ —á–µ–ª–æ–≤–µ–∫–∞
#       else:
#           list_of_times=[5] #–ë—É–¥–Ω–∏–µ –¥–Ω–∏, –æ–¥–∏–Ω —á–µ–ª–æ–≤–µ–∫
#
#    –í –ø–µ—Ä–≤–æ–º —Ç–∏–ø–µ —É –Ω–∞—Å –≤—Å—Ç—Ä–µ—á—á–∞—é—Ç—Å—è —Ü–∏—Ñ—Ä—ã 1,2,3,4,5 —Å–ª–µ–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ num —Ä–∞–≤–Ω–æ 5,—Ç–∞–∫ –∫–∞–∫ 5 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª
#
#   elif datetime.weekday(day_r) == 5: #–°—É–±–±–æ—Ç–∞
#       if clbck1 == '–¢—Ä–∏ —á–µ–ª–æ–≤–µ–∫–∞ –∏ –±–æ–ª—å—à–µ':
#           list_of_times=[2,3] #–°—É–±–±–æ—Ç–Ω–∏–µ –¥–Ω–∏, —Ç—Ä–∏ —á–µ–ª–æ–≤–µ–∫–∞
#       elif clbck1 == '–î–≤–∞ —á–µ–ª–æ–≤–µ–∫–∞': #–°—É–±–±–æ—Ç–Ω–∏–µ –¥–Ω–∏, –¥–≤–∞ —á–µ–ª–æ–≤–µ–∫–∞
#           list_of_times=[1]
#       else:
#           list_of_times=[4] #–°—É–±–±–æ—Ç–Ω–∏–µ –¥–Ω–∏, –æ–¥–∏–Ω —á–µ–ª–æ–≤–µ–∫
#
#     –í –≤—Ç–æ—Ä–æ–º —Ç–∏–ø–µ —É –Ω–∞—Å –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è —Ü–∏—Ñ—Ä—ã 1,2,3,4 —Å–ª–µ–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ num —Ä–∞–≤–Ω–æ 4,—Ç–∞–∫ –∫–∞–∫ 4 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª
#
#   else:                             #–í–æ—Å–∫—Ä–µ—Å–µ–Ω–∏–µ
#       if clbck1 == '–¢—Ä–∏ —á–µ–ª–æ–≤–µ–∫–∞ –∏ –±–æ–ª—å—à–µ':
#           list_of_times=[1,2,3,4,5,6] #–í–æ—Å–∫—Ä–µ—Å–Ω—ã–µ –¥–Ω–∏, —Ç—Ä–∏ —á–µ–ª–æ–≤–µ–∫–∞
#       elif clbck1 == '–î–≤–∞ —á–µ–ª–æ–≤–µ–∫–∞':
#        list_of_times=[1,2,3,4] #–í–æ—Å–∫—Ä–µ—Å–Ω—ã–µ –¥–Ω–∏, –¥–≤–∞ —á–µ–ª–æ–≤–µ–∫–∞
#       else:
#           list_of_times=[7,8] #–í–æ—Å–∫—Ä–µ—Å–Ω—ã–µ –¥–Ω–∏, –æ–¥–∏–Ω —á–µ–ª–æ–≤–µ–∫
#
#    –í –≤—Ç–æ—Ä–æ–º —Ç–∏–ø–µ —É –Ω–∞—Å –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è —Ü–∏—Ñ—Ä—ã 1,2,3,4,5,6,7,8 —Å–ª–µ–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ num —Ä–∞–≤–Ω–æ 8,—Ç–∞–∫ –∫–∞–∫ 8 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª
#
    async def number(self,d):
        if  d <= 4:       #–ë—É–¥–Ω–∏–µ –¥–Ω–∏
            num = 13      #<---–£–∫–∞–∂–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è num
        elif d <= 5:      #–°—É–±–±–æ—Ç–∞
            num = 17      #<---–£–∫–∞–∂–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è num
        elif d <= 6:      #–í–æ—Å–∫—Ä–µ—Å–µ–Ω–∏–µ
            num = 17      #<---–£–∫–∞–∂–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è num
        return num

kb_date_time_list = {\
1:'–ö—Ä–∞—Å–Ω—ã–π 11.00-14.00',\
2:'–ö—Ä–∞—Å–Ω—ã–π 12.00-14.00',\
3:'–ö—Ä–∞—Å–Ω—ã–π 14.00-17.00',\
4:'–ö—Ä–∞—Å–Ω—ã–π 17.00-20.00',\
5:'–ö—Ä–∞—Å–Ω—ã–π –Ω–∞ 20.00-23.00',\
6:'–ö—Ä–∞—Å–Ω—ã–π –Ω–∞ 23.00-02.00',\
7:'–ë–µ–ª—ã–π 11.00-14.00',\
8:'–ë–µ–ª—ã–π 12.00-14.00',\
9:'–ë–µ–ª—ã–π 14.00-17.00',\
10:'–ë–µ–ª—ã–π 17.00-20.00',\
11:'–ë–µ–ª—ã–π –Ω–∞ 20.00-23.00',\
12:'–ë–µ–ª—ã–π –Ω–∞ 23.00-02.00',\
13:'–ß—ë—Ä–Ω—ã–π 11.00-14.00',\
14:'–ß—ë—Ä–Ω—ã–π 12.00-14.00',\
15:'–ß—ë—Ä–Ω—ã–π 14.00-17.00',\
16:'–ß—ë—Ä–Ω—ã–π 17.00-20.00',\
17:'–ß—ë—Ä–Ω—ã–π –Ω–∞ 20.00-23.00',\
18:'–ß—ë—Ä–Ω—ã–π –Ω–∞ 23.00-02.00',\
19:'–î–æ–º–∞—à–Ω–∏–π 11.00-14.00',\
20:'–î–æ–º–∞—à–Ω–∏–π 12.00-14.00',\
21:'–î–æ–º–∞—à–Ω–∏–π 14.00-17.00',\
22:'–î–æ–º–∞—à–Ω–∏–π 17.00-20.00',\
23:'–î–æ–º–∞—à–Ω–∏–π –Ω–∞ 20.00-23.00',\
24:'–î–æ–º–∞—à–Ω–∏–π –Ω–∞ 23.00-02.00',\ #–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Ç–∏–ø–∞ –∑–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ—á–∫—É
}                              #–ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø—è—Ç–æ–π –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–±—Ä–∞–∑—Ü—É: (1:'–ó–Ω–∞—á–µ–Ω–∏–µ',\) —Å–∫–æ–±–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ,
menu_btn = {\                  #—Ü–∏—Ñ—Ä–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—é–±–æ–π,–Ω–æ –æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–æ–π.–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π  
'üé∏–ó–∞–ø–∏—Å–∞—Ç—å—Å—è':'record',\      #–Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä–∞ —ç—Ç–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Ñ—É–Ω–∫—Ü–∏—é kb3(), —Ç–∞–º –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞
'üíæ–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è':'info',\
'‚òéÔ∏è–ö–æ–Ω—Ç–∞–∫—Ç—ã':'admins',\        
}
#–ö—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞, –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–æ—Å—Ç–æ —É–∫–∞–∑–∞—Ç—å –ª—é–±–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø–µ—Ä–≤—ã—Ö –∫–∞–≤—ã—á–∫–∞—Ö
#–ü—Ä–∏–º–µ—Ä ('üé∏–î—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µüé∏':'record',\) —Å–∫–æ–±–∫–∏ –Ω–µ –Ω—É–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å, –º–æ–∂–Ω–æ –≤—Å—Ç–∞–≤–ª—è—Ç—å —ç–º–æ–¥–∑–∏
back_btn = {\
'–ù–∞–∑–∞–¥üîô':'back',\
}
reg_btn = {\
'–ü–æ–µ—Ö–∞–ª–∏!':'record_start',\
}
people_btn = {\
'–û–¥–∏–Ω —á–µ–ª–æ–≤–µ–∫':'–û–¥–∏–Ω —á–µ–ª–æ–≤–µ–∫',\
'–î–≤–∞ —á–µ–ª–æ–≤–µ–∫–∞':'–î–≤–∞ —á–µ–ª–æ–≤–µ–∫–∞',\
'–¢—Ä–∏ —á–µ–ª–æ–≤–µ–∫–∞ –∏ –±–æ–ª—å—à–µ':'–¢—Ä–∏ —á–µ–ª–æ–≤–µ–∫–∞ –∏ –±–æ–ª—å—à–µ',\
}
answer_btn = {\
'–î–∞':'–î–∞',\
'–ù–µ—Ç':'–ù–µ—Ç',\
}
adm_btn = {\
'–í—ã–≤–æ–¥ –∑–∞–ø–∏—Å–µ–π':'adm_print',\
'–î–æ–±–∞–≤–∏—Ç—å':'adm_adder',\
'–í—ã–≤–æ–¥ –±–∞–Ω–æ–≤':'adm_print_ban',\
'–ó–∞–±–∞–Ω–∏—Ç—å':'adm_ban',\
'–í—ã—Ö–æ–¥':'adm_exit',\
}
adm_add = {\
'–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é':'add_big',\
'–î–æ–±–∞–≤–∏—Ç—å —Å–æ–∫—Ä–∞—â—ë–Ω–Ω–æ':'add_small',\
}
def day_s(h):
    day = int(datetime.now().day)#—Å–µ–≥–æ–¥–Ω—è 
    o = int(datetime.now().month) #–Ω–æ–º–µ—Ä –º–µ—Å—è—Ü–∞  
    month  = {1 : 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7:31, 8: 31 , 9: 30, 10: 31, 11: 30, 12: 31 }
    if day + h > month[o]:
        if o + 1 != 13:
            g = str(day + h - month[o]) + "." + str(o + 1)
        else:
            g = str(day + h - month[o]) + str(1) + "."
    else: 
        g = str(day + h) + '.'+ str(o)
    return g 

async def menu_selector(ck):
    await ck.clear_keyboard()
    await ck.new_width_of(1)
    await ck.new_list_of(menu_btn)
    return ck.current_keyboard

async def rec_start(ck):
    await ck.clear_keyboard()
    await ck.new_width_of(1)
    await ck.new_list_of(reg_btn)
    return ck.current_keyboard

async def back_kb(ck):
    await ck.clear_keyboard()
    await ck.new_width_of(1)
    await ck.new_list_of(back_btn)
    return ck.current_keyboard

async def kb1(ck):
    kb_date_15 = {}
    for i_d in range(1,16):
        dater = day_s(i_d).split('.')
        r = date(datetime.now().year,int(dater[1]),int(dater[0]))
        data_db=DBW.kb_check_day(day_s(i_d),await ck.number(datetime.weekday(r)))
        if data_db == True:
            kb_date_15["‚úñÔ∏è"+day_s(i_d)+"‚úñÔ∏è"] = 'error'
        else:
            dater = day_s(i_d).split('.')
            day_r = date(datetime.now().year,int(dater[1]),int(dater[0]))
            if  datetime.weekday(day_r) <= 4:
                kb_date_15["‚òëÔ∏è"+day_s(i_d)+"‚òëÔ∏è"]= day_s(i_d)
            else:
                kb_date_15["üîò"+day_s(i_d)+"üîò"]= day_s(i_d)
    await ck.clear_keyboard()
    await ck.new_width_of(3)
    await ck.new_list_of(kb_date_15)
    return ck.current_keyboard

async def kb2(ck):
    await ck.clear_keyboard()
    await ck.new_width_of(1)
    await ck.new_list_of(people_btn)
    return ck.current_keyboard
#–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞
#–°–≤–µ—Ä—è—è—Å—å —Å–æ —Å–ø–∏—Å–∫–æ–º kb_date_time_list{}, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –∑–∞–ø–æ–ª–Ω–µ–Ω –≤—ã—à–µ, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–ø–∏—Å–∫–∏ list_of_times[] –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —à–∞–±–ª–æ–Ω—É
# kb_date_time_list = {\
# 1:'–ó–Ω–∞—á–µ–Ω–∏–µ 1',\
# 2:'–ó–Ω–∞—á–µ–Ω–∏–µ 2',\
# 3:'–ó–Ω–∞—á–µ–Ω–∏–µ 3'}
#
# list_of_times=[1,2,3] #–ë—É–¥–Ω–∏–µ –¥–Ω–∏, —Ç—Ä–∏ —á–µ–ª–æ–≤–µ–∫–∞
#
# –£ –∫–∞–∂–¥–æ–≥–æ —Å–ø–∏—Å–∫–∞ –µ—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∑–∞ —á—Ç–æ –æ–Ω –æ—Ç–≤–µ—á–∞–µ—Ç, –∑–∞–ø–æ–ª–Ω—è–π—Ç–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏.–ö–∞–∂–¥–∞—è —Ü–∏—Ñ—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–∑–¥–µ–ª–µ–Ω–∞ –∑–∞–ø—è—Ç–æ–π, –∑–∞–ø–æ–ª–Ω—è–π—Ç–µ —Ü–∏—Ñ—Ä—ã –≤ —Ç–∞–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
# –≤ –∫–∞–∫–æ–º —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –ø–æ—Ä—è–¥–æ–∫ –∫–Ω–æ–ø–æ–∫
# –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –≤—ã—à–µ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ number
async def kb3(ck,clbck,clbck1):
    dater = clbck.split('.')
    day_r = date(datetime.now().year,int(dater[1]),int(dater[0]))
    if  datetime.weekday(day_r) <= 4: #–±—É–¥–Ω–∏–µ –¥–Ω–∏
        if clbck1 == '–¢—Ä–∏ —á–µ–ª–æ–≤–µ–∫–∞ –∏ –±–æ–ª—å—à–µ':
            list_of_times=[3,4,5,9,10,11,12,15,16,17,18,23] #–ë—É–¥–Ω–∏–µ –¥–Ω–∏, —Ç—Ä–∏ —á–µ–ª–æ–≤–µ–∫–∞
        elif clbck1 == '–î–≤–∞ —á–µ–ª–æ–≤–µ–∫–∞':
            list_of_times=[16,22,23] #–ë—É–¥–Ω–∏–µ –¥–Ω–∏, –¥–≤–∞ —á–µ–ª–æ–≤–µ–∫–∞
        else:
            list_of_times=[22] #–ë—É–¥–Ω–∏–µ –¥–Ω–∏, –æ–¥–∏–Ω —á–µ–ª–æ–≤–µ–∫
    elif datetime.weekday(day_r) == 5: #–°—É–±–±–æ—Ç–∞
        if clbck1 == '–¢—Ä–∏ —á–µ–ª–æ–≤–µ–∫–∞ –∏ –±–æ–ª—å—à–µ':
            list_of_times=[1,3,4,5,7,9,10,11,12,13,15,16,17,18,21,22,23] #–°—É–±–±–æ—Ç–Ω–∏–µ –¥–Ω–∏, —Ç—Ä–∏ —á–µ–ª–æ–≤–µ–∫–∞
        elif clbck1 == '–î–≤–∞ —á–µ–ª–æ–≤–µ–∫–∞': #–°—É–±–±–æ—Ç–Ω–∏–µ –¥–Ω–∏, –¥–≤–∞ —á–µ–ª–æ–≤–µ–∫–∞
            list_of_times=[13,15,16,18,21,22,23]
        else:
            list_of_times=[21,22,23] #–°—É–±–±–æ—Ç–Ω–∏–µ –¥–Ω–∏, –æ–¥–∏–Ω —á–µ–ª–æ–≤–µ–∫
    else:                             #–í–æ—Å–∫—Ä–µ—Å–µ–Ω–∏–µ
        if clbck1 == '–¢—Ä–∏ —á–µ–ª–æ–≤–µ–∫–∞ –∏ –±–æ–ª—å—à–µ':
            list_of_times=[2,3,4,5,8,9,10,11,12,14,15,16,17,18,21,22,23] #–í–æ—Å–∫—Ä–µ—Å–Ω—ã–µ –¥–Ω–∏, —Ç—Ä–∏ —á–µ–ª–æ–≤–µ–∫–∞
        elif clbck1 == '–î–≤–∞ —á–µ–ª–æ–≤–µ–∫–∞':
            list_of_times=[14,15,16,18,21,22,23] #–í–æ—Å–∫—Ä–µ—Å–Ω—ã–µ –¥–Ω–∏, –¥–≤–∞ —á–µ–ª–æ–≤–µ–∫–∞
        else:
            list_of_times=[21,22,23] #–í–æ—Å–∫—Ä–µ—Å–Ω—ã–µ –¥–Ω–∏, –æ–¥–∏–Ω —á–µ–ª–æ–≤–µ–∫

    current_time={}

    for i in range(len(list_of_times)):
        check=kb_date_time_list[list_of_times[i]]
        time_db = await DBW.kb_check_time(check,clbck)
        if time_db == True:
            current_time["‚úñÔ∏è"+kb_date_time_list[list_of_times[i]]+"‚úñÔ∏è"] = 'error'
        else:
            current_time[kb_date_time_list[list_of_times[i]]] = kb_date_time_list[list_of_times[i]]

    await ck.clear_keyboard()
    await ck.new_list_of(current_time)
    await ck.new_width_of(1)
    return ck.current_keyboard

async def kb6(ck):
    await ck.clear_keyboard()
    await ck.new_width_of(1)
    await ck.new_list_of(answer_btn)
    return ck.current_keyboard

async def kb7(ck):
    await ck.clear_keyboard()
    await ck.new_width_of(1)
    await ck.new_list_of(answer_btn)
    return ck.current_keyboard

async def adm_kb(ck):
    await ck.clear_keyboard()
    await ck.new_width_of(1)
    await ck.new_list_of(adm_btn)
    return ck.current_keyboard

async def adm_add_kb(ck):
    await ck.clear_keyboard()
    await ck.new_width_of(1)
    await ck.new_list_of(adm_add)
    return ck.current_keyboard
